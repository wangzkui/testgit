1、创建版本库
	1.1 初始化一个Git仓库：
	1.1.1 选择一个合适的地方，创建一个空目录
	1.1.2 通过git init命令把这个目录变成Git可以管理的仓库：
		  git init

	1.2 往仓库添加文件：
	1.2.1 用命令git add告诉Git，把文件添加到仓库：
		  git add readme.txt

	1.2.2 用命令git commit告诉Git，把文件提交到仓库：
	      git commit -m "wrote a readme file"
	      添加多个文件：
		    $ git add file1.txt
			$ git add file2.txt file3.txt
			$ git commit -m "add 3 files."
	
	总结：初始化一个Git仓库，使用git init命令。
	添加文件到Git仓库，分两步：
	第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
	第二步，使用命令git commit，完成。
2、时光机穿梭
	要随时掌握工作区的状态，使用git status命令。
	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
	2.1 版本回退：
	    在Git中，我们用git log命令查看：
	    git log命令显示从最近到最远的提交日志，如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
	    Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版，上一个版本就是HEAD^，上上一个版本就是HEAD^^，
	    当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	    git reset --hard HEAD^
	    在Git中，总是有后悔药可以吃的。当你用$ git reset --hard HEAD^回退到上个版本时，再想恢复到之前，就必须找到之前的commit id。
	    Git提供了一个命令git reflog用来记录你的每一次命令：
	    git reflog
	    找到版本号后：
	    git reset --hard 3628164
        现在总结一下：
        HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
        穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
        要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
	    第一次修改 -> git add -> 第二次修改 -> git add -> git commit
	2.2 管理修改：
	    Git管理的是修改，当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，
	    但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，
	    也就是第一次的修改被提交了，第二次的修改不会被提交。
	    提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：
	    那怎么提交第二次修改呢？你可以继续git add再git commit，也可以别着急提交第一次修改，先git add第二次修改，再git commit，就相当于把两次修改合并后一块提交了：
	    第一次修改 -> git add -> 第二次修改 -> git add -> git commit

	    小结:
	    现在，你又理解了Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。
	2.3 撤销修改
	    git checkout -- file可以丢弃工作区的修改：
		git checkout -- readme.txt
		命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
		一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
		一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
		总之，就是让这个文件回到最近一次git commit或git add时的状态。
		git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令，我们在后面的分支管理中会再次遇到git checkout命令

	    小结:
        场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
		场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
		场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
	2.4 删除文件
	    一般情况下，你通常直接在文件管理器中把没用的文件删了，或者用rm命令删了：
		$ git rm test.txt
		rm 'test.txt'
		$ git commit -m "remove test.txt"
		[master d17efd8] remove test.txt
		 1 file changed, 1 deletion(-)
		 delete mode 100644 test.txt
		另一种情况是删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本：
        $ git checkout -- test.txt
        git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
		小结：
		命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，
		你会丢失最近一次提交后你修改的内容。


		





